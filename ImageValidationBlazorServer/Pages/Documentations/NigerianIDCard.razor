@page "/docs/card/validate"
@layout DocumentLayout
@inject IFileReaderService fileReader;
@inject IHttpClientFactory ClientFactory
@inject IToastService toastService

<article>
    <h2 id="example">Validate Nigerian Id Card</h2>
    <p>Creating a step component is so easy. Simply use a <code>&lt;ul class="step-text"></code> tag. You can have sub-steps with nested lists.</p>

    <div class="code-preview">
        <h5>Two Face validation API takes 2 images as input. The first one is the target and while the second is the source image</h5>
        <br>
        <ul class="step-text">
            <li>
                <h5>Select the target image (Left)</h5>
                <p>A gallery can go anywhere on a page or post - by itself on a blank page, or above, below, or in the midst of text. Start by placing your cursor where you want the gallery to appear.</p>
            </li>

            <li>
                <h5>Click and open the source image (Right)</h5>
                <p>Once you've placed your cursor where you want your image gallery to appear, click on the Add Media button (located left above the editing window) to launch the media uploader interface. In the resulting popup window, select the 'Create a Gallery' option from the list of actions on the left.</p>
            </li>
        </ul>
    </div>
</article>

<article>
    <h2 id="example">Try It Out! - Playground</h2>
    <p class="lead">The following is a simulation using our already made sample application.</p>

    <div class="code-preview">
        <h5>Select Images For Nigerian Id Card Validation</h5>
        <br>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <h5 class="card-title">Select image from gallery</h5>
                    <input class="form-control-file" type="file" accept="image/*" @ref="elementReference" capture @onchange="HandleSelected" />
                </div>
            </div>
        </div>
    </div>
</article>

@if (showDetails)
{
<div class="card" style="width: 38rem;">
    <img src="@imgData" class="card-img-top" alt="your image" />
    <div class="card-body">
        <h5 class="card-title">Preview details of the selected file</h5>

        <ul class="list-group">
            <li class="list-group-item">Name:@name</li>
            <li class="list-group-item">Size:@size </li>
            <li class="list-group-item">Type:@type</li>

        </ul>
        <br />
        <button class="btn btn-primary" @onclick="ShowProcessFormClick">Process Id Card</button>
    </div>
</div>
<br />
@if (ShowProcessForm)
{
<div class="card">
    <div class="card-header">
        You can go ahead and process this image
    </div>
    <div class="card-body">
        <h5 class="card-title">Shameless data collection. Let's know who is using this service</h5>
        <p>Email OTP will be introduced later to validate email used</p>

        <div class="row">
            <EditForm class="col-md-3" Model="@ValidateInput" OnValidSubmit="ProcessForOCR">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label class="form-label">Enter email</label>
                    <InputText class="form-control" @bind-Value="@ValidateInput.Email" />
                </div>
                <div class="form-group">
                    <label class="form-label">Enter username</label>

                    <InputText class="form-control" @bind-Value="@ValidateInput.UserName" />
                </div>

                @if (IsRunning)
                    {
                <button class="btn btn-primary disabled" disabled><span class='fa-left fas fa-sync-alt spinning'></span>Please wait...</button>
                    } else {
                <button class="btn btn-primary btn-outline-primary">Begin Image Process</button>
                    }
            </EditForm>
             
        </div>
    </div>
</div>
}
<br />
}

@if (showIdDetails)
{
<div class="card" style="width: 28rem;">
    <div class="card-header">
        Document Details
    </div>
    <img src="@imgData" class="card-img-top" alt="...">

    <ul class="list-group list-group-flush">
        <li class="list-group-item">Name:@documentData.fullName</li>
        <li class="list-group-item">ID Card Number: @documentData.idNumber</li>
        <li class="list-group-item">Date of birth:@documentData.dateOfBirth</li>
        <li class="list-group-item">Date of issue:@documentData.issueDate</li>
        <li class="list-group-item">Date of expiry:@documentData.expiryDate</li>
        <li class="list-group-item">type of card:@documentData.idType</li>
    </ul>
</div>
}

<h4 id="code-blocks-pre">Sample API Request</h4>
<p>Use <code>&lt;pre&gt;</code> for multiple lines of code. Be sure to escape any angle brackets in the code for proper rendering.</p>
<div class="code-snippet">
    <div class="code-preview">
        <pre><code>POST</code>&nbsp;&nbsp;<code>/FacialrecogAPI/ValidateNigerianIDCards</code></pre>
    </div>
    <pre class="no-toolbar">
    <code class="language-markup">
            {
                "email": "string",
                "userName": "string"
            }
        </code>
    </pre>
</div>

@code {

    private EditContext editContext;
    Models.ResponseClass.Data documentData;
    ElementReference elementReference;
    string name;
    string Email;
    string UserName;
    long size;
    string type;
    string imgData;
    string imgByte;
    bool showDetails;
    bool showIdDetails;
    bool IsRunning;
    bool ShowAlerResult;
    bool ShowProcessForm;
    string AlertMessage;
    Models.ValidateInputModel ValidateInput = new Models.ValidateInputModel();

    async Task HandleSelected()
    {
        var file = (await fileReader.CreateReference(elementReference).EnumerateFilesAsync()).FirstOrDefault();
        var fileInfo = await file.ReadFileInfoAsync();
        name = fileInfo.Name;
        size = fileInfo.Size;
        type = fileInfo.Type;
        using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
        {
            var inputStream = new MemoryStream(ms.ToArray());
            imgByte = Convert.ToBase64String(inputStream.ToArray());
            imgData = "data:" + fileInfo.Type + ";base64," + imgByte;
        }
        showDetails = true;
        showIdDetails = false;
        ShowProcessForm = false;
        StateHasChanged();
    }

    public void ShowProcessFormClick()
    {
        ShowProcessForm = !ShowProcessForm;
    }

    async Task ProcessForOCR()
    {
        try
        {
            IsRunning = true;
            StateHasChanged();
            IdentificationValidationLib.API apiCalls = new IdentificationValidationLib.API();

            var endPoint = "https://pass.sterling.ng/FacialrecogAPI/ValidateIDCard";
            //var endPoint = "https://localhost:32389/ValidateIDCard";

            ValidateInput.Base64Encoded = imgByte;

            var result = await apiCalls.Post<Models.ResponseClass.Root, HelperLib.BaseResponse>(ValidateInput, endPoint);
            ShowAlerResult = true;
            StateHasChanged();
            if (result.isSuccess)
            {
                documentData = result.SuccessObj.data;
                showIdDetails = true;
                showDetails = false;
                toastService.ShowSuccess("Successfully done");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine(result.failedObj?.Message ?? "Error");
                // AlertMessage = result.returnedStringContent;
                toastService.ShowError(result.returnedStringContent);
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine(ex);
            AlertMessage = ex.ToString();
            toastService.ShowError(AlertMessage);
        }
        finally
        {
            IsRunning = false;

            StateHasChanged();
        }
    }

}
