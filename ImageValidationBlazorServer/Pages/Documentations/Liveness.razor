@page "/docs/face/liveness"
@using Microsoft.JSInterop
@using System.Text.RegularExpressions

@layout DocumentLayout
@inject IJSRuntime JS

<h1>Liveness Check</h1>
    <div class="left">
        <video style="background-color: lightgrey;" id="preview" width="360" height="360" autoplay muted></video>

    </div>
    <div class="right">
        <button id="stopButton" class="button">Stop</button>
        <h2>Recording</h2>
        <video id="recording" width="360" height="360" controls></video>
        <a id="downloadButton" class="button">Download</a>
    </div>
    <div class="bottom" style="visibility: hidden;">
        <pre id="log"></pre>
    </div>

@if(isProcessing) { 
    <h1>Processing</h1>
} else { 
<h1>Not Processing</h1>
}
<button @onclick="Start" id="startButton" class="btn btn-primary btn-block">Check Liveness</button>

@code {
    //https://stackoverflow.com/questions/56627649/how-can-i-get-javascript-callback-in-net-blazor
    private string name;
    private string result;
    private DotNetObjectReference<Liveness> objRef;
    bool isProcessing;
    private IdentificationValidationLib.Models.FaceRequest request = new IdentificationValidationLib.Models.FaceRequest();
    private static Random random = new Random();

    protected override void OnInitialized()
    {

    }

    public async Task Start()
    {
        objRef = DotNetObjectReference.Create(this);
        result = await JS.InvokeAsync<string>("WebCamFunctions.start", objRef, name);

    }

    [JSInvokable("WebCameraCallBack")]
    public async Task WebCameraCallBack(string base64EncodedString)
    {

        IdentificationValidationLib.API apiCalls = new IdentificationValidationLib.API();
        var endPoint = "https://pass.sterling.ng/FacialrecogAPI/liveness";

        string encodedResult = base64EncodedString.Replace("data:video/mp4;base64,", string.Empty);
        request.VideoFile = encodedResult;
        request.UserIdentification = RandomString(14);

        var result = await apiCalls.Post<HelperLib.BaseResponse<IdentificationValidationLib.Models.FaceResponse>, HelperLib.BaseResponse>(request, endPoint);

        isProcessing = true;

        //TODO: Make An API Call
        StateHasChanged();
    }


    public static string RandomString(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        return new string(Enumerable.Repeat(chars, length)
          .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}